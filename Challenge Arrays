Use the functions you just learned and the concatenation function ++ to work with the payload below so that the missing dayOfWeek field is included in each event and only events organized by Ross are shown.

As an example, you can see how a datetime value is converted to a LocalDateTime and date decomposition used to obtain a day of the week from 1 to 7 and then mapped to the desired name.

Input
[
  {
    "datetime": "2020-01-01T08:00:00",
    "event": "Breakfast @ Cafe",
    "organizer": "Phoebe"
  },
  {
    "datetime": "2020-01-02T18:00:00",
    "event": "Study for cert exam",
    "organizer": "Ross"
  },
  {
    "datetime": "2020-01-04T16:00:00",
    "event": "Drinks w/ friends",
    "organizer": "Monica"
  },
  {
    "datetime": "2020-01-08T08:00:00",
    "event": "Develop mule application",
    "organizer": "Ross"
  },
  {
    "datetime": "2020-01-05T08:00:00",
    "event": "Football game",
    "organizer": "Joey"
  }
]

SCRIPT
%dw 2.0
output json
var weekdays = [
  "mon",
  "tue",
  "wed",
  "thu",
  "fri",
  "sat",
  "sun"
]
// dayOfWeek is a value from 1 to 7
fun toWeekDay(date : String) : String = weekdays[(date as LocalDateTime).dayOfWeek - 1]
var num = filter(payload, (n,idx)-> n."organizer"=="Ross")
---
num map (n, idx) ->{
  "datetime" : n."datetime",
  "event" : n."event",
  "organizer" : n."organizer",
  "day" : toWeekDay(n."datetime")
}
OUTPUT
[
  {
    "datetime": "2020-01-02T18:00:00",
    "event": "Study for cert exam",
    "organizer": "Ross",
    "day": "thu"
  },
  {
    "datetime": "2020-01-08T08:00:00",
    "event": "Develop mule application",
    "organizer": "Ross",
    "day": "wed"
  }
]
